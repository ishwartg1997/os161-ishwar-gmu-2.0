Thread Questions:

1) The current thread is detached from the process, interrupts are turned off on the processor and the thread is put in a zombie state awaiting destruction.

2) thread_switch
3) If a thread is in S_READY, the thread is ready to run and is placed on the run queue after we have a lock on the run queue. 

If a thread is in S_RUN, the thread is currently running and the address space of the thread is made visible to the processor, by loading it into the MMU. 

If a thread is in S_SLEEP, the thread is queued on the wait channel and is protected by a spinlock.

If a thread is in S_ZOMBIE state, that means thread_exit has been called but the thread has not yet been destroyed. It is added to a list of zombie threads where it awaits eventual destruction.

4) It means that the executing thread/ process in that environment can execute undisturbed and not be interrupted by other threads/ processes. We accomplish this on an processor by setting the spl variable value to the value returned by splhigh(). This is important because we want to prevent concurrent access to shared variables and data structures currently being used in the critical section of the thread which could cause data corruption.
5) The thread which is woken up is now ready to run and is placed on the run queue.  Calling wakeup on the channel will make the thread runnable again.

Scheduler:

1) The schedule function, hardclock function
2) Since jobs are taken from the run queue and schedule function can reshuffle the run queue, it can pick what thread to run next. This is done on the basis of job priority
3) The hardware timer handles context switches. The schedule function is called on a timer interrupt.
Synchronization:

1) While the semaphore variable is 0, the P operation uses wchan_sleep to  go to sleep on a wireless channel with a spinlock, thus implementing busy waiting before it accesses the semaphore variable. The V operation uses wchan_wakeone to signal  that the semaphore resource has become available for one of the threads to be notified.

2) We are interested only in the current thread and whether it holds the necessary lock to access a critical or protected section/structure
